[user]
  name = kenorb
  email = kenorb@users.noreply.github.com

[core]
  filemode = true
  ; detect and raise errors about trailing spaces and spaces before tabs
  whitespace = trailing-space,space-before-tab
  excludesfile = ~/.gitignore
  autocrlf = false

[push]
  default = current

[gc]
  auto = 1

[color]
  ui = auto

;[filter "rcs-keywords"]
;  clean=.git_filters/rcs-keywords.clean
;  smudge=.git_filters/rcs-keywords.smudge %f

# Usage in .gitattributes: some-dotfile filter=remove-pass
[filter "remove-pass"]
clean = "sed -e 's/^password=.*/#password=TODO/'"

[apply]
  ; strip whitespaces, but only during patch, not "always automatically"
  whitespace = fix

[rebase]
  autoStash = true

[merge]
  renamelimit = 7274

[mergetool]
  tool = diffmerge

[mergetool "sourcetree"]
  cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
  trustExitCode = true

# DIFF section
[diff]
  tool = diffmerge
  renamelimit = 7274

[diff "ansible-vault"]
  cachetextconv = false
  textconv = ansible-vault view

[diff "zip"]
  textconv = unzip -v

[diff "bin"]
  textconv = hexdump -v -C

[diff "pdf"]
  textconv = pdfinfo

[diff "utf-16"]
  # @see: http://blog.xk72.com/post/31456986659/diff-strings-files-in-git
  textconv = "iconv -f utf-16 -t utf-8"

[opendiff]
  tool = opendiff

[difftool]
  prompt = NO
  tool = diffmerge

[difftool "diffmerge"]
  cmd = /Applications/DiffMerge.app/Contents/MacOS/DiffMerge "$LOCAL" "$REMOTE" # For DiffMerge
  keepBackup = false
  trustExitCode = true

[difftool "bbdiff"]
  cmd = /usr/local/bin/bbdiff --wait --resume "$LOCAL" "$REMOTE" # for BBEdit

[difftool "twdiff"]
  cmd = /usr/bin/twdiff --wait --resume "$LOCAL" "$REMOTE" # for TextWrangler

[difftool "filemerge"]
  cmd = /usr/bin/opendiff "$LOCAL" "$REMOTE" # for FileMerge

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =

[alias]
  lol             = log --graph --decorate --pretty=oneline --abbrev-commit
  lola            = log --graph --decorate --pretty=oneline --abbrev-commit --all
  curr-branch     = !git rev-parse --abbrev-ref HEAD
  log-graph       = !git log --oneline --graph --decorate --all
  out =             !git log --boundary $(git rev-list --max-count=1 --simplify-by-decoration HEAD^)..
  sm-diff =         "submodule foreach 'git diff'"
  sm-clean-all =    "submodule foreach --recursive 'git clean -fXd'"
  pull-forks =      "!git submodule foreach 'git pull `git config --get remote.origin.url | sed s#EXAMPLE#kenorb#`&'"
  ; tag-svn2git =     !git for-each-ref refs/remotes/tags --shell --format="r=%(refname:short) t=\${r#tags/}" | while read e; do eval "$e"; git tag -f $t refs/remotes/$r; git branch -d -r $r; done
  ; branch-svn2git =  !git for-each-ref refs/remotes --shell --format="r=%(refname:short) t=\${r#tags/}" | while read e; do eval "$e"; git branch -f $t refs/remotes/$r; git branch -d -r $r; done
  addremove = !git add . && git ls-files -deleted | xargs git rm
  majonez = !echo Hellmanns
  svn-dcommit =     "!set -o xtrace; git stash; git svn dcommit; git stash pop -q"
# set -o xtrace; git stash; git svn dcommit; git stash pop -q"
  checkout-all      = !"find . -name .git -type d -print -execdir git checkout -f HEAD \\;"
  fetch-all         = !"find . -name .git -type d -print -execdir git fetch --all \\;"
  pull-all          = !"find . -name .git -type d -print -execdir git pull origin \\;"
  update-all        = "!cd $(git rev-parse --show-toplevel 2> /dev/null) && find -name .git -type d -execdir git pull -v ';'"
  reset-all         = !"find . -name .git -type d -print -execdir git reset HEAD --hard \\;"
# $(git rev-parse --show-toplevel 2> /dev/null)

; HOW TO
; How to change the author of past commits in git? See: http://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git
;   git filter-branch -f --env-filter 'if [ $GIT_AUTHOR_EMAIL = old@email ]; then GIT_AUTHOR_EMAIL='new@email'; GIT_COMMITTER_EMAIL='new@email'; fi; export GIT_AUTHOR_EMAIL; export GIT_COMMITTER_EMAIL;'
;   git filter-branch -f --env-filter "GIT_AUTHOR_NAME='Newname'; GIT_AUTHOR_EMAIL='newemail'; GIT_COMMITTER_NAME='Oldname'; GIT_COMMITTER_EMAIL='oldemail';" HEAD
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
