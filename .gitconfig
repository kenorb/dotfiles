[user]
  name = kenorb
  email = kenorb@users.noreply.github.com

[credential]
	helper = osxkeychain

[core]
  editor = vim
  filemode = true
  ; detect and raise errors about trailing spaces and spaces before tabs
  whitespace = trailing-space,space-before-tab
  excludesfile = ~/.gitignore
  autocrlf = false

[push]
  default = current

[gc]
  auto = 1

[color]
  branch = auto
  diff = auto
  status = auto
  ui = auto

;[filter "rcs-keywords"]
;  clean=.git_filters/rcs-keywords.clean
;  smudge=.git_filters/rcs-keywords.smudge %f

# Usage in .gitattributes: some-dotfile filter=remove-pass
[filter "remove-pass"]
clean = "sed -e 's/^password=.*/#password=TODO/'"

[apply]
  ; strip whitespaces, but only during patch, not "always automatically"
  whitespace = fix

[rebase]
  autoStash = true

# DIFF section
[diff]
  tool = diffmerge
  guitool = diffmerge
  renamelimit = 7274

#[diff "ansible-vault"]
  #cachetextconv = false
  #textconv = ansible-vault view

[diff "zip"]
  textconv = unzip -v

[diff "bin"]
  textconv = hexdump -v -C

[diff "pdf"]
  textconv = pdfinfo

[diff "utf-16"]
  # @see: http://blog.xk72.com/post/31456986659/diff-strings-files-in-git
  textconv = "iconv -f utf-16 -t utf-8"

[difftool]
  prompt = NO
  tool = diffmerge

[difftool "bbdiff"]
  cmd = /usr/local/bin/bbdiff --wait --resume "$LOCAL" "$REMOTE" # for BBEdit

[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
  keepBackup = false
  trustExitCode = true

[difftool "filemerge"]
  cmd = /usr/bin/opendiff "$LOCAL" "$REMOTE" # for FileMerge

[difftool "meld"]
	cmd = meld \"$LOCAL\" \"$REMOTE\"

[difftool "opendiff"]
  tool = opendiff

[difftool "sourcetree"]
  cmd = opendiff \"$LOCAL\" \"$REMOTE\"
  path =

[difftool "twdiff"]
  cmd = /usr/bin/twdiff --wait --resume "$LOCAL" "$REMOTE" # for TextWrangler

[difftool "vimdiff"]
  tool = vimdiff

[merge]
	prompt = false
	tool = mergemeld
	conflictstyle = diff3
	log = yes

[mergetool "mergemeld"]
	  cmd = meld --auto-merge --output \"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\" --diff \"$BASE\" \"$LOCAL\" --diff \"$BASE\" \"$REMOTE\"

[mergetool "kdiff3"]
	cmd = kdiff3 $LOCAL $BASE $REMOTE -o $MERGED

[alias]
  aa           = commit --all --amend --no-edit
  addremove    = !git add . && git ls-files -deleted | xargs git rm
  b            = branch
  br           = branch
  big-files    = !"git rev-list --objects --all \
                 | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
                 | sed -n 's/^blob //p' \
                 | sort --numeric-sort --key=2 \
                 | cut -c 1-12,41- \
                 | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest"
  checkout-all = !"find . -name .git -type d -print -execdir git checkout -f HEAD \\;"
  ca           = commit -a
  cp           = cherry-pick
  d            = diff
  gb           = get-branch
  get-branch   = rev-parse --abbrev-ref HEAD
  diff-stash   = stash show -p stash@{0}
  f            = fetch
  fe           = fetch
  fo           = fetch origin
  fetch-all    = !"find . -name .git -type d -print -execdir git fetch --all \\;"
  log-graph    = log --oneline --graph --decorate --all
  lol          = log --graph --decorate --pretty=oneline --abbrev-commit
  lola         = log --graph --decorate --pretty=oneline --abbrev-commit --all
  majonez      = !echo Hellmanns
  out          = !git log --boundary $(git rev-list --max-count=1 --simplify-by-decoration HEAD^)..
  pull-all     = !"find . -name .git -type d -print -execdir git pull origin \\;"
  pull-forks   = "!git submodule foreach 'git pull `git config --get remote.origin.url | sed s#EXAMPLE#kenorb#`&'"
  reset-author = "commit --amend --reset-author --no-edit"
  reset-all    = !"find . -name .git -type d -print -execdir git reset HEAD --hard \\;"
  s            = status
  st           = status
  sm-clean-all = "submodule foreach --recursive 'git clean -fXd'"
  sm-diff      = "submodule foreach 'git diff'"
  smu          = submodule update
  svn-dcommit  = "!set -o xtrace; git stash; git svn dcommit; git stash pop -q"
  update-all   = "!cd $(git rev-parse --show-toplevel 2> /dev/null) && find -name .git -type d -execdir git pull -v ';'"
  ; branch-svn2git =  !git for-each-ref refs/remotes --shell --format="r=%(refname:short) t=\${r#tags/}" | while read e; do eval "$e"; git branch -f $t refs/remotes/$r; git branch -d -r $r; done
  ; tag-svn2git =     !git for-each-ref refs/remotes/tags --shell --format="r=%(refname:short) t=\${r#tags/}" | while read e; do eval "$e"; git tag -f $t refs/remotes/$r; git branch -d -r $r; done
# set -o xtrace; git stash; git svn dcommit; git stash pop -q"
# $(git rev-parse --show-toplevel 2> /dev/null)

; HOW TO
; How to change the author of past commits in git? See: http://stackoverflow.com/questions/750172/how-do-i-change-the-author-of-a-commit-in-git
;   git filter-branch -f --env-filter 'if [ $GIT_AUTHOR_EMAIL = old@email ]; then GIT_AUTHOR_EMAIL='new@email'; GIT_COMMITTER_EMAIL='new@email'; fi; export GIT_AUTHOR_EMAIL; export GIT_COMMITTER_EMAIL;'
;   git filter-branch -f --env-filter "GIT_AUTHOR_NAME='Newname'; GIT_AUTHOR_EMAIL='newemail'; GIT_COMMITTER_NAME='Oldname'; GIT_COMMITTER_EMAIL='oldemail';" HEAD
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[clangFormat]
	extension = cpp,c,hpp,h,mq4,mq5,mqh
	style = file

[hooks.clangformat]
	verbose = ON
