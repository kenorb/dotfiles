# ~/.bash_exports
# Define Bash exports.
# Invoked by .bash_profile file.

# Initialize
[ -z "$PS1" ] && return
RC_LOADED+=($(basename $BASH_SOURCE))
[ ${BASH_VERSION:0:1} -gt 3 ] && echo "${RC_LOADED[-1]} loaded." >&2

# Path.
export PATH="$HOME/bin:$HOME/binfiles:/usr/local/sbin:/usr/local/bin:$PATH"

# Adds user's local bin directory.
[ -d "$HOME"/bin ] && export PATH="$PATH:$HOME/bin"
[ -d "$HOME"/.local/bin ] && export PATH="$PATH:$HOME/.local/bin"

# Composer.
# Add a Composer's global bin directory if exists.
which composer >/dev/null && export PATH="$HOME/.composer/vendor/bin:$PATH"
# Increases Docker timeouts.
export COMPOSE_HTTP_TIMEOUT=600
export DOCKER_CLIENT_TIMEOUT=600

# Homebrew
ACCEPT_EULA=y
#HOMEBREW_NO_ENV_FILTERING=1

# Prompt.
export PS1='\[\033[01;31m\]\u\[\033[01;33m\]@\[\033[01;36m\]\h \[\033[01;33m\]\w \[\033[01;35m\]\$ \[\033[00m\]'
export PROMPT_DIRTRIM=2

# Editor.
export EDITOR='vim'

# Terminal colors (e.g. echo "${COLOR_RED}foo").
export COLOR_RESET=$(tput sgr0)
export COLOR_BLACK=$(tput setaf 0)
export COLOR_RED=$(tput setaf 1)
export COLOR_GREEN=$(tput setaf 2)
export COLOR_YELLOW=$(tput setaf 3)
export COLOR_BLUE=$(tput setaf 4)
export COLOR_MAGENTA=$(tput setaf 5)
export COLOR_CYAN=$(tput setaf 6)
export COLOR_WHITE=$(tput setaf 7)

# CLI and ls colors.
export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
which dircolors &> /dev/null && eval "`dircolors`"

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Perl 5.
if [ -d ~/perl5 ]; then
  export PERL_LOCAL_LIB_ROOT="$PERL_LOCAL_LIB_ROOT:$HOME/perl5"
  export PERL_MB_OPT="--install_base $HOME/perl5"
  export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"
  export PERL5LIB="$HOME/perl5/lib/perl5:$PERL5LIB"
  export PATH="$PATH:$HOME/perl5/bin"
fi

# Mule ESB configuration.
[ -d /usr/local/opt/mule ] && export MULE_HOME=/usr/local/opt/mule
[ -d "$MULE_HOME" ] && export PATH=$PATH:$MULE_HOME/bin

# Fixes for sed.
# @see: http://www.delorie.com/gnu/docs/gawk/gawk_149.html
# @see: http://stackoverflow.com/q/19242275/55075
export LANG=C
export LC_CTYPE=C 

# Set architecture flags for x64
export ARCHFLAGS="-arch x86_64"

# asciidoc: Used to process AsciiDoc files through an XML stage (such as a2x for manpages).
[ -d /usr/local/etc/xml/catalog ] \
    && export XML_CATALOG_FILES=/usr/local/etc/xml/catalog

# android-sdk: Control Android SDK packages via the sdkmanager command.
[ -d /usr/local/share/android-sdk ] \
    && export ANDROID_SDK_ROOT=/usr/local/share/android-sdk

# For Cargo (Rust package manager).
[ -d "$HOME"/.cargo/bin ] \
  && export PATH="$HOME/.cargo/bin:$PATH"

# For Go (a tool for managing Go source code).
[ -d "$HOME"/go/bin ] \
  && export PATH="$HOME/go/bin:$PATH"

# For Anaconda3 installer.
[ -d "$HOME"/anaconda/bin ] \
    && export PATH="$HOME/anaconda/bin:$PATH"

# For libxml2.
[ -d /usr/local/opt/libxml2/bin ] \
    && export PATH="/usr/local/opt/libxml2/bin:$PATH"

# tcl-tk: tk installs some X11 headers and macOS provides an (older) Tcl/Tk.
[ -d /usr/local/opt/tcl-tk/bin ] \
    && export PATH="/usr/local/opt/tcl-tk/bin:$PATH"

# Adds depot_tools for Chromium.
[ -d $HOME/Sources/Chromium/depot_tools ] \
    && export PATH="$PATH:$HOME/Sources/Chromium/depot_tools"

# Configure ncurses package.
[ -d /usr/local/opt/ncurses/bin ] \
    && export PATH="/usr/local/opt/ncurses/bin:$PATH"

# Configure icu4c package.
[ -d /usr/local/opt/icu4c/bin ] \
    && export PATH="/usr/local/opt/icu4c/sbin:/usr/local/opt/icu4c/bin:$PATH"

# Configure Platform.sh.
# BEGIN SNIPPET: Platform.sh CLI configuration
[ -d "$HOME"/.platformsh ] \
  && (
    export PATH="$PATH:$HOME/.platformsh/bin"
    if [ -f "$HOME/.platformsh/shell-config.rc" ]; then . "$HOME/.platformsh/shell-config.rc"; fi
  )
# END SNIPPET

# Notes:
# For compilers to find this software you may need to set:
#     LDFLAGS:  -L/usr/local/opt/ncurses/lib
#     CPPFLAGS: -I/usr/local/opt/ncurses/include
# For pkg-config to find this software you may need to set:
#     PKG_CONFIG_PATH: /usr/local/opt/ncurses/lib/pkgconfig

# Configure Go package.
[ -d /usr/local/opt/go/libexec/bin ] \
    && export PATH=$PATH:/usr/local/opt/go/libexec/bin
# Notes for go package:
# A valid GOPATH is required to use the `go get` command.
# If $GOPATH is not specified, $HOME/go will be used by default
# @see: https://golang.org/doc/code.html#GOPATH
if [ -z "$GOPATH" ] && command -v go &> /dev/null; then
  export GOPATH=$(go env GOPATH)
fi

# Configure curl on macOS.
[ -d "/usr/local/opt/curl/bin" ] \
  && export PATH="/usr/local/opt/curl/bin:$PATH"

# Configure Ansible.
# @see: https://docs.ansible.com/ansible/latest/reference_appendices/config.html
#ANSIBLE_PYTHON_INTERPRETER=/usr/bin/python3
